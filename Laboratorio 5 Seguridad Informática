# -*- coding: utf-8 -*-
"""Lab 5 Seguridad .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f2VnuXSHEY8WPzkN0EgYcY-1J_1OzhL4
"""

from google.colab import drive
drive.mount("/content/drive")

## Laboratorio 2 Seguridad informatica
## Integrantes:
## Catalina Parra, Susana Ramirez, Diego Olavarría

!pip install pyDes https://files.pythonhosted.org/packages/92/5e/0075a35ea5d307a182b0963900298b209ea2f363ccdd5a27e8cb04c58410/pyDes-2.0.1.tar.gz
!pip install pyaes https://files.pythonhosted.org/packages/44/66/2c17bae31c906613795711fc78045c285048168919ace2220daa372c7d72/pyaes-1.6.1.tar.gz
!pip install pycrypto https://files.pythonhosted.org/packages/60/db/645aa9af249f059cc3a368b118de33889219e0362141e75d4eaf6f80f163/pycrypto-2.6.1.tar.gz

!pip install pbkdf2 https://files.pythonhosted.org/packages/02/c0/6a2376ae81beb82eda645a091684c0b0becb86b972def7849ea9066e3d5e/pbkdf2-1.3.tar.gz

!pip install pycryptodomex https://files.pythonhosted.org/packages/52/0d/6cc95a83f6961a1ca041798d222240890af79b381e97eda3b9b538dba16f/pycryptodomex-3.15.0.tar.gz

from pyDes import des, CBC, PAD_PKCS5
import binascii

# Clave secreta
KEY='mHAxsLYz'
def des_encrypt(s):
    """
         Cifrado DES
         : param s: cadena sin procesar
         : return: cadena encriptada, hexadecimal
    """
    secret_key = KEY
    iv = secret_key
    k = des(secret_key, CBC, iv, pad=None, padmode=PAD_PKCS5)
    en = k.encrypt(s, padmode=PAD_PKCS5)
    return binascii.b2a_hex(en)
 
 
def des_descrypt(s):
    """
         Descifrado DES
         : param s: cadena encriptada, hexadecimal
         : return: cadena descifrada
    """
    secret_key = KEY
    iv = secret_key
    k = des(secret_key, CBC, iv, pad=None, padmode=PAD_PKCS5)
    de = k.decrypt(binascii.a2b_hex(s), padmode=PAD_PKCS5)
    return de

from Crypto.Cipher import DES3
from Crypto import Random
key = 'Sixteen byte key'
iv = Random.new().read(DES3.block_size) #DES3.block_size==8
cipher_encrypt = DES3.new(key, DES3.MODE_OFB, iv)
plaintext = b'segurida' #padded with spaces so than len(plaintext) is multiple of 8
encrypted_text = cipher_encrypt.encrypt(plaintext)

cipher_decrypt = DES3.new(key, DES3.MODE_OFB, iv) #you can't reuse an object for encrypting or decrypting other data with the same key.
cipher_decrypt.decrypt(encrypted_text)
#cipher_decrypt.decrypt(encrypted_text) #you cant do it twice

from Cryptodome.Cipher import AES
import binascii, os

def encrypt_AES_GCM(msg, secretKey):
    aesCipher = AES.new(secretKey, AES.MODE_GCM)
    ciphertext, authTag = aesCipher.encrypt_and_digest(msg)
    return (ciphertext, aesCipher.nonce, authTag)

def decrypt_AES_GCM(encryptedMsg, secretKey):
    (ciphertext, nonce, authTag) = encryptedMsg
    aesCipher = AES.new(secretKey, AES.MODE_GCM, nonce)
    plaintext = aesCipher.decrypt_and_verify(ciphertext, authTag)
    return plaintext

secretKey = os.urandom(32)  # 256-bit random encryption key
print("Encryption key:", binascii.hexlify(secretKey))

msg = b'segurida'
encryptedMsg = encrypt_AES_GCM(msg, secretKey)
print("encryptedMsg", {
    'ciphertext': binascii.hexlify(encryptedMsg[0]),
    'aesIV': binascii.hexlify(encryptedMsg[1]),
    'authTag': binascii.hexlify(encryptedMsg[2])
})

decryptedMsg = decrypt_AES_GCM(encryptedMsg, secretKey)
print("decryptedMsg", decryptedMsg)

import pyaes 

import pyDes 
import binascii
from binascii import hexlify
import socket

from random import randint

BUF_SIZE = 65536
if __name__ == '__main__':
	P = 23 #primo
	G = 9 #generador
	
	with open("/content/drive/MyDrive/mensajedeentrada1.txt", "r") as f:
			mensaje = f.readlines()
			while True:
					data = f.read(BUF_SIZE)
					if not data:
							break
					mensaje = f.readlines()
 
	with open("/content/drive/MyDrive/mensajedesalida1.txt", "r") as f:
			mensaje2 = f.readlines()
			while True:
					data2 = f.read(BUF_SIZE)
					if not data2:
							break
					mensaje2 = f.readlines()
	
	llave = 0x8404f0d7	 
	a =str(''.join(map(str,mensaje)))
	llave_cif = des_encrypt(a)
	des_desen = des_descrypt(llave_cif)
	AESencryptedMsg = encrypt_AES_GCM(b'segurida', secretKey)
	AESdecrypt_AES_GCM = decrypt_AES_GCM(AESencryptedMsg, secretKey)
	tripleDESencryptedtext = cipher_encrypt.encrypt(a*8)
	tripleDESdecryp = cipher_decrypt.decrypt(tripleDESencryptedtext)

	print(AESencryptedMsg)
	print(llave_cif)
	print(des_desen)


	b =str(''.join(map(str,mensaje2)))
	llave_cif2 = des_encrypt(b)
	des_desen2 = des_descrypt(llave_cif2) 
	print(llave_cif2)
	print(des_desen2)
 
	tripleDESencryptedtext2 = cipher_encrypt.encrypt(b*8)
	tripleDESdecryp2 = cipher_decrypt.decrypt(tripleDESencryptedtext)
 
	AESencryptedMsg2 = encrypt_AES_GCM(b'mensajes', secretKey)
	AESdecrypt_AES_GCM2 = decrypt_AES_GCM(AESencryptedMsg2, secretKey)
	print(AESencryptedMsg2)

 
	

	a = 4
	print('Numero público del cliente es :%d'%(a))
	

	x = int(pow(G,a,P))
	

	b = 3
	print('Numero público del servidor es :%d'%(b))
	

	y = int(pow(G,b,P))
	
	

	ka = int(pow(y,a,P))
	

	kb = int(pow(x,b,P))
	
	print('Llave privada del cliente es : %d'%(ka))
	print('Llave privada del servidor es : %d'%(kb))
 

	
	
	if (ka == kb):
		archivo_salida = open("/content/drive/MyDrive/mensajerecibido1.txt","w")
		archivo_salida.write("Mensaje de entrada encriptado DES--> " + str(llave_cif) + "\n" + 
												"Mensaje de salida encriptado DES --> " + str(llave_cif2) + "\n" + 
												"Mensaje de entrada desencriptado DES --> " + str(des_desen) + "\n" +
												"Mensaje de salida desencriptado DES --> " + str(des_desen2) + "\n" + 
												"Mensaje de entrada encriptado AES -->" + str(AESencryptedMsg) +  "\n" +
												"Mensaje de salida encriptado AES -->" + str(AESencryptedMsg2) +  "\n" +
												"Mensaje de entrada desencriptado AES -->" + str(AESdecrypt_AES_GCM) +  "\n" +
												"Mensaje de salida desencriptado AES -->" + str(AESdecrypt_AES_GCM2) +  "\n" 
												"Mensaje de entrada encriptado 3DES -->" + str(tripleDESencryptedtext) +  "\n" +
												"Mensaje de salida encriptado 3DES -->" + str(tripleDESencryptedtext2) +  "\n" +
												"Mensaje de entrada desencriptado 3DES -->" + str(tripleDESdecryp) +  "\n" +
												"Mensaje de salida desencriptado 3DES -->" + str(tripleDESdecryp2) +  "\n" ) 
		archivo_salida.close()
