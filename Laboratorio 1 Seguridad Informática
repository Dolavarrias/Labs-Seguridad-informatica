# -*- coding: utf-8 -*-
"""Seg_Inf_Laboratorio_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c3R08XuTfBjKlgJiKeWPf4W_8IhaOitk
"""

## Laboratorio 1 Seguridad informatica
## Integrantes:
## Catalina Parra, Susana Ramirez, Diego OlavarrÃ­a


from random import sample
from itertools import product as col
import requests

paso = 1
for i in (0, 2):

	dict1 = {'A' : 1, 'B' : 2, 'C' : 3, 'D' : 4, 'E' : 5,
					'F' : 6, 'G' : 7, 'H' : 8, 'I' : 9, 'J' : 10,
					'K' : 11, 'L' : 12, 'M' : 13, 'N' : 14, 'O' : 15,
					'P' : 16, 'Q' : 17, 'R' : 18, 'S' : 19, 'T' : 20,
					'U' : 21, 'V' : 22, 'W' : 23, 'X' : 24, 'Y' : 25, 'Z' : 26}

	dict2 = {0 : 'Z', 1 : 'A', 2 : 'B', 3 : 'C', 4 : 'D', 5 : 'E',
					6 : 'F', 7 : 'G', 8 : 'H', 9 : 'I', 10 : 'J',
					11 : 'K', 12 : 'L', 13 : 'M', 14 : 'N', 15 : 'O',
					16 : 'P', 17 : 'Q', 18 : 'R', 19 : 'S', 20 : 'T',
					21 : 'U', 22 : 'V', 23 : 'W', 24 : 'X', 25 : 'Y'}

	def encriptar(mensaje, saltos):
			cifrado = ''
			for letter in mensaje:
					if(letter != ' '):
							num = ( dict1[letter] + saltos ) % 26
							cifrado += dict2[num]
					else:
							cifrado += ' '

			return cifrado

	def desencriptar(mensaje, saltos):
			desifrado = ''
			for letter in mensaje:
					if(letter != ' '):
							num = ( dict1[letter] - saltos + 26) % 26
							desifrado += dict2[num]
					else:
							desifrado += ' '

			return desifrado

	def generator(llave,char,length):
			char_len = llave.count(char)   
			llave_piece = llave[:length - char_len:]
			list_llaves = [llave_piece+"".join(i) for i in list(col([chr(i) for i in range(65, 65+26)], repeat=char_len))]
			return list_llaves
		
	def vigenere(x,llave):
			lst_final = []
			code = list(x)
			j = 0
		
			for i,char in enumerate(code):
					if char.isalpha():
							code[i] = llave[(i+j)%len(llave)]
							if encriptar:
									lst_final.append((ord(x[i]) + ord(code[i]) - 65 * 2) % 26)
							else:
									lst_final.append((ord(x[i]) - ord(code[i])) % 26)
					else:
							lst_final.append(ord(char))
							j -=1

			for i,char in enumerate(code):
					if char.isalpha():
							lst_final[i] = chr(lst_final[i] + 65)
					else:
							lst_final[i] = chr(lst_final[i])
				
			return ''.join(lst_final)
	if paso == 1 or paso == 2:
		mensaje = input("Root(n) --> Ingrese el mensaje que desea encriptar: ")
		saltos = int(input("Ingrese el n del root: "))
		resultado = encriptar(mensaje.upper(), saltos)
		print(resultado)
		paso = paso + 1
	if paso > 2:
		mensaje = input("Ingrese el mensaje que desea desencriptar : ")
		saltos = int(input("Ingrese el n del root: "))
		resultado = desencriptar(mensaje.upper(), saltos)
		paso = paso + 1 
		print(resultado)
	

	if input('Vigenere --> encriptar o desencriptar : ').lower() == 'encriptar':
			x = input('Ingrese el mensaje que desea encriptar: ').upper()
			llave = input('Ingrese la llave : ').upper()
			encriptar = True
			print(vigenere(x,llave))
	else:
			x = input('Mensaje : ').upper()
			encriptar = False
			llave = input('Ingrese la llave : ').upper()
			print(vigenere(x,llave))

			 
	if paso > 3:
		mensaje = input("Root(n) --> Ingrese el mensaje que desea desencriptar: ")
		saltos = int(input("Ingrese el n del root: "))
		resultado = desencriptar(mensaje.upper(), saltos)
		paso = paso + 1 
		print(resultado)

			
headers = {
    'Content-Type': 'text/plain',
}

data = {"msg": "TSDIWUTAHQL"}

response = requests.post('https://finis.mmae.cl/SendMsg', headers=headers, data=data)

#Ejercicio 2

import requests

encrypt = False

DicOriginal = {'A' : 1, 'B' : 2, 'C' : 3, 'D' : 4, 'E' : 5,
        'F' : 6, 'G' : 7, 'H' : 8, 'I' : 9, 'J' : 10,
        'K' : 11, 'L' : 12, 'M' : 13, 'N' : 14, 'O' : 15,
        'P' : 16, 'Q' : 17, 'R' : 18, 'S' : 19, 'T' : 20,
        'U' : 21, 'V' : 22, 'W' : 23, 'X' : 24, 'Y' : 25, 'Z' : 26}

DicROT = {0 : 'Z', 1 : 'A', 2 : 'B', 3 : 'C', 4 : 'D', 5 : 'E',
        6 : 'F', 7 : 'G', 8 : 'H', 9 : 'I', 10 : 'J',
        11 : 'K', 12 : 'L', 13 : 'M', 14 : 'N', 15 : 'O',
        16 : 'P', 17 : 'Q', 18 : 'R', 19 : 'S', 20 : 'T',
        21 : 'U', 22 : 'V', 23 : 'W', 24 : 'X', 25 : 'Y'}

def decrypt(message, shift):
	decipher = ''
	for letter in message:
		if(letter != ' '):
			num = (DicOriginal[letter] - shift + 26) % 26
			decipher += DicROT[num]
		else:
			decipher += ' '

	return decipher


def vigenere(x,key):
        lst_final = []
        code = list(x)
        j = 0
      
        for i,char in enumerate(code):
            if char.isalpha():
                code[i] = key[(i+j)%len(key)]
                if encrypt:
                    lst_final.append((ord(x[i]) + ord(code[i]) - 65 * 2) % 26)
                else:
                    lst_final.append((ord(x[i]) - ord(code[i])) % 26)
            else:
                lst_final.append(ord(char))
                j -=1

        for i,char in enumerate(code):
            if char.isalpha():
                lst_final[i] = chr(lst_final[i] + 65)
            else:
                lst_final[i] = chr(lst_final[i])
          
        return ''.join(lst_final)
    


headers = {
    'Content-Type': 'text/plain',
}

response = requests.get('https://finis.mmae.cl/GetMsg', headers=headers)
original = response.json() 
original = original.get("msg")
print(original, "Es el mensaje cifrado")

shift = 12
result = decrypt(original.upper(), shift)
msg = result
print(result, "Paso descifrado por ROT(12)")


DecVig = vigenere(msg, "FINISPASSWD")
print(DecVig, "Paso descifrado por Vigenere con llave FINISPASSWD")


shift = 8
result = decrypt(DecVig.upper(), shift)
msg = result
print(msg, "Mensaje final descifrado por ROT(8)")
